export class OculusHandPointerModel extends Object3D<import("three").Event> {
    constructor(hand: any, controller: any);
    hand: any;
    controller: any;
    motionController: any;
    envMap: any;
    mesh: any;
    pointerGeometry: BufferGeometry | null;
    pointerMesh: Mesh<BufferGeometry, MeshBasicMaterial> | null;
    pointerObject: Object3D<import("three").Event> | null;
    pinched: boolean;
    attached: boolean;
    cursorObject: Mesh<SphereGeometry, MeshBasicMaterial> | null;
    raycaster: Raycaster | null;
    xrInputSource: any;
    _drawVerticesRing(vertices: any, baseVector: any, ringIndex: any): void;
    _updatePointerVertices(rearRadius: any): void;
    createPointer(): void;
    _updateRaycaster(): void;
    _updatePointer(): void;
    isPinched(): boolean;
    setAttached(attached: any): void;
    isAttached(): boolean;
    intersectObject(object: any): import("three").Intersection<Object3D<import("three").Event>>[] | undefined;
    intersectObjects(objects: any): import("three").Intersection<Object3D<import("three").Event>>[] | undefined;
    checkIntersections(objects: any): void;
    setCursor(distance: any): void;
}
import { Object3D } from "three/src/core/Object3D";
import { BufferGeometry } from "three/src/core/BufferGeometry";
import { MeshBasicMaterial } from "three/src/materials/MeshBasicMaterial";
import { Mesh } from "three/src/objects/Mesh";
import { SphereGeometry } from "three/src/geometries/SphereGeometry";
import { Raycaster } from "three/src/core/Raycaster";
